name: CI pipeline

on:
  push:
    branches: [dev]

env:
  build_dir: build
  build_config: Debug
  test_target: ulib-test
  cpp_test_target: ulib-cpp-test
  bench_target: ulib-bench
  docs_target: ulib-docs

jobs:
  build:
    name: Build and test

    strategy:
      fail-fast: false
      matrix:
        os:
          - name: ubuntu
            cflags: -Werror -fsanitize=address
            lflags: -fsanitize=address
          - name: windows
            cflags: /WX
          - name: macos
            cflags: -Werror -fsanitize=address
            lflags: -fsanitize=address
        lib_type: [STATIC, SHARED]
        types: [normal, tiny, huge]

    runs-on: ${{matrix.os.name}}-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure CMake
        run: >
          cmake -B ${{env.build_dir}}
          -DULIB_LIBRARY_TYPE=${{matrix.lib_type}}
          -DULIB_TINY=${{matrix.types == 'tiny' && 'ON' || 'OFF'}}
          -DULIB_HUGE=${{matrix.types == 'huge' && 'ON' || 'OFF'}}
          -DULIB_LEAKS=ON
          -DCMAKE_SYSTEM_VERSION=''
          -DCMAKE_BUILD_TYPE=${{env.build_config}}
          -DCMAKE_C_FLAGS='${{matrix.os.cflags}}'
          -DCMAKE_CXX_FLAGS='${{matrix.os.cflags}}'
          -DCMAKE_SHARED_LINKER_FLAGS='${{matrix.os.lflags}}'
          -DCMAKE_EXE_LINKER_FLAGS='${{matrix.os.lflags}}'

      - name: Build
        run: >
          cmake --build ${{env.build_dir}}
          --config ${{env.build_config}}
          --target ${{env.test_target}} ${{env.cpp_test_target}} ${{env.bench_target}}

      - name: Configure tests
        working-directory: ${{env.build_dir}}/test
        if: runner.os == 'Windows'
        run: |
          mv ${{env.build_config}}/*.exe ./
          if [ ${{matrix.lib_type}} == 'SHARED' ]; then
            mv ../${{env.build_config}}/*.dll ./
          fi
        shell: bash

      - name: Test
        working-directory: ${{env.build_dir}}/test
        run: ./${{env.test_target}}

      - name: Test (C++)
        working-directory: ${{env.build_dir}}/test
        run: ./${{env.cpp_test_target}}

      - name: Benchmark
        working-directory: ${{env.build_dir}}/test
        run: ./${{env.bench_target}}

  docs:
    name: Generate the documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure runner
        run: |
          sudo apt install doxygen
          pip3 install -U Sphinx sphinx-rtd-theme breathe

      - name: Build docs
        run: |
          cmake -B ${{env.build_dir}}
          cmake --build ${{env.build_dir}} --target ${{env.docs_target}}
